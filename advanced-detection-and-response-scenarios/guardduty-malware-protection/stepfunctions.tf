#####################
# 31. Step Functions 실행 역할 (states.amazonaws.com)
#####################

resource "aws_iam_role" "step_function_exec" {
  name = "step-function-exec-role"                            # Step Functions 실행 역할 이름

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect = "Allow",
      Principal = {
        Service = "states.amazonaws.com"                      # Step Functions에서 역할 사용 허용
      },
      Action = "sts:AssumeRole"
    }]
  })
}

#####################
# 32. Step Functions가 Lambda들을 호출할 수 있는 권한
#####################

resource "aws_iam_role_policy" "step_function_lambda_invoke" {
  name = "step-lambda-invoke"                                 # 정책 이름
  role = aws_iam_role.step_function_exec.id                   # 연결할 IAM 역할 ID

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = "lambda:InvokeFunction",                     # Lambda 함수 호출 권한
        Resource = [                                          # 호출 가능한 Lambda 목록
          aws_lambda_function.ipset_add.arn,
          aws_lambda_function.abuse_lookup.arn,
          aws_lambda_function.discord_notify.arn
        ]
      }
    ]
  })
}

#####################
# 33. Step Functions 상태 머신 정의
#####################

resource "aws_sfn_state_machine" "waf_step" {
  name     = "waf-step-function"                               # 상태 머신 이름
  role_arn = aws_iam_role.step_function_exec.arn               # 실행 역할 지정

  definition = jsonencode({                                    # 상태 머신 정의 (JSON 기반)
    Comment = "Auto block IP via WAF IPSet and notify user on Discord",  # 설명
    StartAt = "ipset-add-lambda",                              # 시작 단계

    States = {
      # 1단계: IPSet에 IP 추가
      "ipset-add-lambda" = {
        Type       = "Task",
        Resource   = "${aws_lambda_function.ipset_add.arn}",   # 실행할 Lambda ARN
        Parameters = {
          "ip.$" = "$.ip"                                      # 입력 JSON에서 ip 값 추출하여 전달
        },
        ResultPath = "$.ipResult",                             # 결과를 저장할 위치
        Next       = "abuseipdb-lookup-lambda",                # 다음 단계

        Catch = [{                                             # 예외 처리
          ErrorEquals = ["States.ALL"],
          Next        = "FailState"
        }]
      },

      # 2단계: AbuseIPDB에서 IP 조회
      "abuseipdb-lookup-lambda" = {
        Type       = "Task",
        Resource   = "${aws_lambda_function.abuse_lookup.arn}",
        Parameters = {
          "ip.$" = "$.ipResult.ip"                             # 이전 결과에서 ip 추출하여 전달
        },
        ResultPath = "$",                                      # 결과를 전체 context에 저장
        Next       = "discord-alarm-lambda",                   # 다음 단계

        Catch = [{
          ErrorEquals = ["States.ALL"],
          Next        = "FailState"
        }]
      },

      # 3단계: Discord 알림 전송
      "discord-alarm-lambda" = {
        Type     = "Task",
        Resource = "${aws_lambda_function.discord_notify.arn}",
        End      = true,                                       # 상태 머신 종료 지점

        Catch = [{
          ErrorEquals = ["States.ALL"],
          Next        = "FailState"
        }]
      },

      # 실패 시 상태
      "FailState" = {
        Type  = "Fail",                                        # 실패 상태 정의
        Error = "WorkflowFailed",
        Cause = "Step Function execution failed"
      }
    }
  })

  depends_on = [
    aws_lambda_function.ipset_add,                             # Lambda들이 모두 생성된 후 실행
    aws_lambda_function.abuse_lookup,
    aws_lambda_function.discord_notify,
    aws_iam_role.step_function_exec,
    aws_iam_role_policy.step_function_lambda_invoke
  ]
}
