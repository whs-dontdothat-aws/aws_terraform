#####################
# 24. Lambda 실행 역할 (Step Functions 포함)
#####################

resource "aws_iam_role" "lambda_exec" {
  name = "lambda-waf-step-role"                               # Lambda 및 Step Functions 실행용 IAM Role

  assume_role_policy = jsonencode({                           # 이 역할을 사용할 수 있는 서비스 정의
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = "sts:AssumeRole",
        Principal = {
          Service = [
            "lambda.amazonaws.com",                           # Lambda가 사용할 수 있도록 허용
            "states.amazonaws.com"                            # Step Functions도 역할 Assume 허용
          ]
        }
      }
    ]
  })
}

#####################
# 25. Lambda에 CloudWatch Logs 권한 부여
#####################

resource "aws_iam_role_policy_attachment" "lambda_basic" {
  role       = aws_iam_role.lambda_exec.name                  # 대상 IAM 역할
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"  # CloudWatch 로그 권한
}

#####################
# 26. Lambda에 Step Functions 실행 권한 부여
#####################

resource "aws_iam_role_policy" "inline_start_sf" {
  name = "inline-start-sf"                                    # 정책 이름
  role = aws_iam_role.lambda_exec.id                          # 대상 IAM 역할 ID

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = "states:StartExecution",                     # Step Functions 실행 권한 부여
        Resource = aws_sfn_state_machine.waf_step.arn         # 실행 대상: waf_step 상태 머신
      }
    ]
  })

  depends_on = [aws_sfn_state_machine.waf_step]               # 상태 머신 생성 이후 실행
}

#####################
# 27. Lambda 함수 - (A) Step Functions 트리거
#####################

resource "aws_lambda_function" "api_trigger" {
  function_name = "lambda-api-trigger"                        # Lambda 함수 이름
  filename      = "${path.module}/lambda_zips/gateway_trigger_lambda.zip"  # 배포할 zip 파일 경로
  handler       = "gateway_trigger_lambda.lambda_handler"   # 핸들러 경로 (파일.함수)
  runtime       = "python3.10"                                # 실행 런타임
  role          = aws_iam_role.lambda_exec.arn                # 연결할 IAM 역할

  environment {
    variables = {
      STEP_FUNCTION_ARN = aws_sfn_state_machine.waf_step.arn  # Step Functions 상태 머신 ARN
    }
  }

  depends_on = [aws_sfn_state_machine.waf_step]
}

#####################
# 28. Lambda 함수 - (B) WAF IPSet 추가
#####################

resource "aws_lambda_function" "ipset_add" {
  function_name = "lambda-ipset-add"
  filename      = "${path.module}/lambda_zips/ipset_add_lambda.zip"
  handler       = "ipset_add_lambda.lambda_handler"
  runtime       = "python3.10"
  role          = aws_iam_role.lambda_exec.arn

  environment {
    variables = {
      IPSET_NAME = aws_wafv2_ip_set.blocked_ips.name          # 차단할 IPSet 이름
      IPSET_ID   = aws_wafv2_ip_set.blocked_ips.id            # IPSet의 ID
      WAF_SCOPE  = "REGIONAL"                                 # WAF의 범위
    }
  }
}

#####################
# 29. Lambda 함수 - (C) AbuseIPDB 조회
#####################

resource "aws_lambda_function" "abuse_lookup" {
  function_name = "lambda-abuse-lookup"
  filename      = "${path.module}/lambda_zips/abuseipdb_lookup_lambda.zip"
  handler       = "abuseipdb_lookup_lambda.lambda_handler"
  runtime       = "python3.10"
  role          = aws_iam_role.lambda_exec.arn

  environment {
    variables = {
      ABUSEIPDB_API_KEY = var.abuseipdb_api_key              # AbuseIPDB API Key를 환경변수로 주입
    }
  }
}

#####################
# 30. Lambda 함수 - (D) Discord 알림
#####################

resource "aws_lambda_function" "discord_notify" {
  function_name = "lambda-discord-alarm"
  filename      = "${path.module}/lambda_zips/discord_notify_lambda.zip"
  handler       = "discord_notify_lambda.lambda_handler"
  runtime       = "python3.10"
  role          = aws_iam_role.lambda_exec.arn

  environment {
    variables = {
      DISCORD_WEBHOOK_URL = var.webhook_url                  # Discord Webhook URL 환경변수
    }
  }
}
